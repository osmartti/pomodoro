#!/bin/bash

WORK_MINUTES=${1:-25}
BREAK_MINUTES=${2:-5}
WORK_CATEGORY=${3:-"Working"}
AMOUNT_OF_CYCLES=${4:-1}
WORK_SECONDS=$((WORK_MINUTES * 60))
BREAK_SECONDS=$((BREAK_MINUTES * 60))
MINIMALISTIC=true
PROGRESS_BAR_STYLE=1
STATS_PATH="/home/$(whoami)"
THEME="default"
cycles_remaining=$AMOUNT_OF_CYCLES

# Read values from config file if it exists, otherwise use defaults
if [[ -f ~/.local/bin/.pomodoro_config ]]; then
    MINIMALISTIC=$(grep MINIMALISTIC ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    PROGRESS_BAR_STYLE=$(grep PROGRESS_BAR_STYLE ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    STATS_PATH=$(grep STATS_PATH ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    THEME=$(grep THEME ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
fi

countdown() {
    local total=$1
    local message=$2
    local width=30
    local seconds=$total
    local spinner_chars=(":    " "::   " ":::  " " ::::" "  :::" "   ::" "    :" "     ")
    local spinner_index=0

    while [[ $seconds -gt 0 || $seconds -eq 0 ]]; do
        local mins=$((seconds / 60))
        local secs=$((seconds % 60))

        local percent=$(( (total - seconds) * 100 / total ))
        local filled=$(( percent * width / 100 ))
        local empty=$(( width - filled ))

        # ANSI colors
        local green=$'\e[32m'
        local red=$'\e[31m'
        local reset=$'\e[0m'
        # Build colored progress bar
        local filled_bar=""
        local bar_char="‚ñà"
        case "$PROGRESS_BAR_STYLE" in
        "1") bar_char="‚ñà" ;;
        "2") bar_char="|" ;;
        "3") bar_char="‚ñì" ;;
        "4") bar_char="‚ñí" ;;
        "5") bar_char="‚ñë" ;;
        esac
        for ((i = 0; i < filled; i++)); do filled_bar+="$bar_char"; done
        local empty_bar=""
        for ((i = 0; i < empty; i++)); do empty_bar+="$bar_char"; done

        local bar="${green}${filled_bar}${red}${empty_bar}${reset}"
        local spinner="${spinner_chars[spinner_index]}"
        spinner_index=$(( (spinner_index + 1) % ${#spinner_chars[@]} ))
        # Print the progress bar
        printf "\r[%s] ${pomodoro_color_scheme}%s${reset} %02d:%02d remaining" "$bar" "$spinner" "$mins" "$secs" 

        sleep 1
        ((seconds--))
    done
    # End of countdown function
    echo -e "\n$message complete!\a"

    # If running in WSL, try playing a sound using PowerShell
    if grep -qi microsoft /proc/version; then
        if [[ "$2" == "Work" ]]; then
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm09.wav").PlaySync()' &
        else
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm10.wav").PlaySync()' &
        fi
    fi
}

# Main method
main() {
    local pomodoro_color_scheme=$(get_color_scheme)
    case $1 in

    --help|-h)
        help
        ;;
    --version|-v)
        version
        exit 0
        ;;
    --day|-d)
        day
        ;;
    --week|-w)
        week
        ;;
    --stats|-s)
        stats
        ;;
    *)
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
        ;;
    esac
}

# Commands

# Main pomodoro function
pomodoro() {
    clear
    # If pomodoro config file does not exist, create it with default values
    if ! test -f  ~/.local/bin/.pomodoro_config; then
        echo "MINIMALISTIC=true" > ~/.local/bin/.pomodoro_config
        echo "PROGRESS_BAR_STYLE=1" >> ~/.local/bin/.pomodoro_config
        echo "STATS_PATH=$STATS_PATH"  >> ~/.local/bin/.pomodoro_config
    fi
    if ! test -f $STATS_PATH/pomodoro_stats.csv; then
        echo "Creating pomodoro stats file at $STATS_PATH/pomodoro_stats.csv"
        echo "date;category;work_minutes;break_minutes" > $STATS_PATH/pomodoro_stats.csv
    fi
    ascii_pomodoro
    if [[ $cycles_remaining -gt 1 ]]; then
        echo "üíª üìñ üëì $WORK_MINUTES minutes of $WORK_CATEGORY for $cycles_remaining cycles..."
    else
        echo "üíª üìñ üëì $WORK_MINUTES minutes of $WORK_CATEGORY..."
    fi
    countdown "$WORK_SECONDS" "Work"

    echo "‚òï Time for a break: $BREAK_MINUTES minutes..."
    countdown "$BREAK_SECONDS" "Break"

    echo "‚úÖ Pomodoro session complete!"

    echo "$(date +'%Y-%m-%d %H:%M');$WORK_CATEGORY;$WORK_MINUTES;$BREAK_MINUTES" >> $STATS_PATH/pomodoro_stats.csv
    cycles_remaining=$((cycles_remaining - 1))
    if [[ cycles_remaining -gt 0 ]]; then
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
    else
        echo "üéâ All cycles completed! Well done!"
    fi
    exit 0
}

# Display version information
version() {
    echo "v1.0 Pomodoro Timer - a simple pomodoro timer for Unix "
    exit 0
}

# Display help messages
help() {
    printf "
        Usage: pomodoro [WORK_MINUTES] [BREAK_MINUTES] [WORK_CATEGORY] [AMOUNT_OF_CYCLES]
        Default: 25 minutes work, 5 minutes break, category 'Working', cycles 1
        Example:
        pomodoro 30 10 'Reading' 2
        Commands:
        --help, -h      Show help
        --version, -v   Show version
        --day, -d       Show today's stats
        --week, -w      Show this week's stats
        --stats, -s     Show all stats
        Check the config file at ~/.local/bin/.pomodoro_config for more options.
        Config file options:
        MINIMALISTIC=true/false   Enable/disable minimalistic mode
        THEME=default|miami|sunrise|dracula|mint|night|ocean|seabreeze
        PROGRESS_BAR_STYLE=1-5    Choose progress bar style (1-5)
        STATS_PATH=/path/to/stats  Set the path for stats file
    "
    exit 0
}

# Display today's pomodoro stats
day() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')

    if [[ -f "$stats_file" ]]; then
        stats=$(grep "$today" "$stats_file")
        if [[ -z "$stats" ]]; then
            echo "‚ùå No pomodoro stats found for today."
        else
            echo "üìä Today's "$today" Pomodoro Stats ‚úÖ"
            echo "|-------------------------------------------------------------------------|"
            echo "|Date...................|Category...........................|W.Min.|B.Min.|"
            echo "|-------------------------------------------------------------------------|"
            while IFS=";" read -r date category work break; do
                printf "|‚úÖ %-19s | %-33s | %4s | %4s |\n" "$date" "$category" "$work" "$break"
            done <<< "$stats"
        fi
    else
        echo "‚ùå No pomodoro stats found for today."
    fi
    exit 0
}

week() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')

    if [[ -f "$stats_file" ]]; then
        found=false
        for i in {0..6}; do
            day=$(date -d "$today - $i days" +'%Y-%m-%d')
            stats=$(grep "$day" "$stats_file")
            if [[ -n "$stats" ]]; then
                if ! $found; then
                    echo "üìÖ Pomodoro Stats for $(date -d "$today - 6 days" +'%Y-%m-%d') - $today ‚úÖ"
                    echo "|-------------------------------------------------------------------------|"
                    echo "|Date...................|Category...........................|W.Min.|B.Min.|"
                    echo "|-------------------------------------------------------------------------|"
                fi
                found=true
                while IFS=";" read -r date category work break; do
                    printf "|‚úÖ %-19s | %-33s | %4s | %4s |\n" "$date" "$category" "$work" "$break"
                done <<< "$stats"
            fi
        done
        if ! $found; then
            echo "‚ùå No pomodoro stats found for this week."
        fi
    else
        echo "‚ùå No pomodoro stats found for this week."
    fi
    exit 0
}

stats() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"

    if [[ -f "$stats_file" ]]; then
        echo "üìä All Time Pomodoro Stats ‚úÖ"
        echo "|-------------------------------------------------------------------------|"
        echo "|Date...................|Category...........................|W.Min.|B.Min.|"
        echo "|-------------------------------------------------------------------------|"
        while IFS=";" read -r date category work break; do
            if [[ "$date" == "date" ]]; then
                continue
            fi
            printf "|‚úÖ %-19s | %-33s | %4s | %4s |\n" "$date" "$category" "$work" "$break"
        done < "$stats_file"
    else
        echo "‚ùå No pomodoro stats found."
    fi
    exit 0
}

ascii_pomodoro() {
    if [[ "$MINIMALISTIC" == "true" ]]; then
        return
    fi
    reset=$'\e[0m'
    echo -e "${pomodoro_color_scheme}"
    cat <<'EOF'
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
EOF
    echo -e "${reset}"
}

get_color_scheme() {
    case "$THEME" in
    "default")
        printf $'\e[37m'  # White
        ;;
    "miami")
        printf $'\e[95m'  # Pink
        ;;
    "sunrise")
        printf $'\e[93m'  # Yellow
        ;;
    "dracula")
        printf $'\e[31m'  # Red
        ;;
    "mint")
        printf $'\e[92m'  # Green
        ;;
    "night")
        printf $'\e[90m'  # Dark Gray
        ;;
    "ocean")
        printf $'\e[94m'  # Blue
        ;;
    "seabreeze")
        printf $'\e[96m'  # Cyan
        ;;
    *)
        printf $'\e[37m'  # Default to white if theme is unknown
        ;;
    esac
}

main "$@"