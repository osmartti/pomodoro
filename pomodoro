#!/bin/bash

WORK_MINUTES=${1:-25}
BREAK_MINUTES=${2:-5}
WORK_CATEGORY=${3:-"Working"}
WORK_SECONDS=$((WORK_MINUTES * 60))
BREAK_SECONDS=$((BREAK_MINUTES * 60))

countdown() {
    local total=$1
    local message=$2
    local width=30
    local seconds=$total
    local spinner_chars=(":    " "::   " ":::  " " ::::" "  :::" "   ::" "    :" "     ")
    local spinner_index=0

    while [[ $seconds -gt 0 || $seconds -eq 0 ]]; do
        local mins=$((seconds / 60))
        local secs=$((seconds % 60))

        local percent=$(( (total - seconds) * 100 / total ))
        local filled=$(( percent * width / 100 ))
        local empty=$(( width - filled ))

        # ANSI colors
        local green=$'\e[32m'
        local red=$'\e[31m'
        local reset=$'\e[0m'
        local orange=$'\e[33m'
        # Build colored progress bar
        local filled_bar=""
        for ((i = 0; i < filled; i++)); do filled_bar+="|"; done
        local empty_bar=""
        for ((i = 0; i < empty; i++)); do empty_bar+="|"; done

        local bar="${green}${filled_bar}${red}${empty_bar}${reset}"
        local spinner="${spinner_chars[spinner_index]}"
        spinner_index=$(( (spinner_index + 1) % ${#spinner_chars[@]} ))
        # Print the progress bar
        printf "\r[%s] ${orange}%s${reset} %02d:%02d remaining" "$bar" "$spinner" "$mins" "$secs" 

        sleep 1
        ((seconds--))
    done
    # End of countdown function
    echo -e "\n$message complete!\a"

    # If running in WSL, try playing a sound using PowerShell
    if grep -qi microsoft /proc/version; then
        if [[ "$2" == "Work" ]]; then
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm09.wav").PlaySync()' &
        else
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm10.wav").PlaySync()' &
        fi
    fi
}

# Main method
main() {
    case $1 in

    --help|-h)
        help
        ;;
    --version|-v)
        version
        exit 0
        ;;
    --day|-d)
        day
        ;;
    *)
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
        ;;
    esac
}

# Commands

# Main pomodoro function
pomodoro() {
    clear
    if ! test -f /home/$(whoami)/pomodoro_stats.csv; then
        echo "date;category;work_minutes;break_minutes" > /home/$(whoami)/pomodoro_stats.csv
    fi

    pink=$'\e[95m'
    reset=$'\e[0m'
    echo -e "${pink}"
    ascii_pomodoro
    echo -e "${reset}"
    echo "üíª üìñ üëì $WORK_MINUTES minutes of $WORK_CATEGORY..."
    countdown "$WORK_SECONDS" "Work"

    echo "‚òï Time for a break: $BREAK_MINUTES minutes..."
    countdown "$BREAK_SECONDS" "Break"

    echo "‚úÖ Pomodoro session complete!"

    echo "$(date +'%Y-%m-%d %H:%M');$WORK_CATEGORY;$WORK_MINUTES;$BREAK_MINUTES" >> /home/$(whoami)/pomodoro_stats.csv
}

# Display version information
version() {
    echo "v1.0 Pomodoro Timer - a simple pomodoro timer for Unix "
    exit 0
}

# Display help messages
help() {
    echo "Usage: pomodoro [WORK_MINUTES] [BREAK_MINUTES] [WORK_CATEGORY]"
    echo "Default: 25 minutes work, 5 minutes break, category 'Working'"
    echo "Example:"
    echo "pomodoro 30 10 'Reading'"
    echo "Commands:"
    echo "  --help, -h       Show help"
    echo "  --version, -v    Show version"
    echo "  --day, -d       Show today's stats"
    exit 0
}

# Display today's pomodoro stats
day() {
    clear
    pink=$'\e[95m'
    reset=$'\e[0m'
    echo -e "${pink}"
    ascii_pomodoro
    echo -e "${reset}"
    echo "üìÖ Today's "$(date +'%Y-%m-%d')" Pomodoro Stats ‚úÖ"
    echo "|-------------------------------------------------------------------------|"
    echo "|Date...................|Category...........................|W.Min.|B.Min.|"
    echo "|-------------------------------------------------------------------------|"
    stats_file="/home/$(whoami)/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')

    if [[ -f "$stats_file" ]]; then
        stats=$(grep "$today" "$stats_file")
        if [[ -z "$stats" ]]; then
            echo "‚ùå No pomodoro stats found for today."
        else
            while IFS=";" read -r date category work break; do
                printf "|‚úÖ %-19s | %-33s | %4s | %4s |\n" "$date" "$category" "$work" "$break"
            done <<< "$stats"
        fi
    else
        echo "‚ùå No pomodoro stats found for today."
    fi
    exit 0
}

ascii_pomodoro() {
  cat <<'EOF'
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
EOF
}

main "$@"