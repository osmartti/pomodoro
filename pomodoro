#!/bin/bash

if [[ -f ~/.local/bin/.pomodoro_config ]]; then
    DEFAULT_WORK_MINUTES=$(grep DEFAULT_WORK_MINUTES ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    DEFAULT_BREAK_MINUTES=$(grep DEFAULT_BREAK_MINUTES ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
fi

WORK_MINUTES=${1:-${DEFAULT_WORK_MINUTES:-25}}
BREAK_MINUTES=${2:-${DEFAULT_BREAK_MINUTES:-5}}
AMOUNT_OF_CYCLES=${4:-1}
WORK_SECONDS=$((WORK_MINUTES * 60))
BREAK_SECONDS=$((BREAK_MINUTES * 60))
MINIMALISTIC=true
PROGRESS_BAR_STYLE=1
STATS_PATH="/home/$(whoami)"
THEME="default"
cycles_remaining=$AMOUNT_OF_CYCLES

# Read values from config file if it exists, otherwise use defaults
if [[ -f ~/.local/bin/.pomodoro_config ]]; then
    MINIMALISTIC=$(grep MINIMALISTIC ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    PROGRESS_BAR_STYLE=$(grep PROGRESS_BAR_STYLE ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    STATS_PATH=$(grep STATS_PATH ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    THEME=$(grep THEME ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
    DEFAULT_CATEGORY=$(grep DEFAULT_CATEGORY ~/.local/bin/.pomodoro_config | cut -d '=' -f2 | tr -d '[:space:]')
fi

WORK_CATEGORY=${3:-"$DEFAULT_CATEGORY"}

countdown() {
    local total=$1
    local message=$2
    local width=30
    local seconds=$total
    local spinner_chars=(":    " "::   " ":::  " " ::::" "  :::" "   ::" "    :" "     ")
    local spinner_index=0

    while [[ $seconds -gt 0 || $seconds -eq 0 ]]; do
        local mins=$((seconds / 60))
        local secs=$((seconds % 60))

        local percent=$(( (total - seconds) * 100 / total ))
        local filled=$(( percent * width / 100 ))
        local empty=$(( width - filled ))

        # ANSI colors
        local green=$'\e[32m'
        local red=$'\e[31m'
        # Build colored progress bar
        local filled_bar=""
        local bar_char="‚ñà"
        case "$PROGRESS_BAR_STYLE" in
        "1") bar_char="‚ñà" ;;
        "2") bar_char="|" ;;
        "3") bar_char="‚ñì" ;;
        "4") bar_char="‚ñí" ;;
        "5") bar_char="‚ñë" ;;
        esac
        for ((i = 0; i < filled; i++)); do filled_bar+="$bar_char"; done
        local empty_bar=""
        for ((i = 0; i < empty; i++)); do empty_bar+="$bar_char"; done

        local bar="${green}${filled_bar}${red}${empty_bar}${reset}"
        local spinner="${spinner_chars[spinner_index]}"
        spinner_index=$(( (spinner_index + 1) % ${#spinner_chars[@]} ))
        # Print the progress bar
        printf "\r[%s] ${pomodoro_color_scheme}%s${reset} %02d:%02d remaining" "$bar" "$spinner" "$mins" "$secs" 

        sleep 1
        ((seconds--))
    done
    # End of countdown function
    echo -e "\n$message complete!\a"

    # If running in WSL, try playing a sound using PowerShell
    if grep -qi microsoft /proc/version; then
        if [[ "$2" == "Work" ]]; then
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm09.wav").PlaySync()' &
        else
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm10.wav").PlaySync()' &
        fi
    fi
}

# Main method
main() {
    local pomodoro_color_scheme=$(get_color_scheme)
    local reset=$'\e[0m'
    case $1 in

    --help|-h)
        help
        ;;
    --version|-v)
        version
        exit 0
        ;;
    --day|-d)
        day
        ;;
    --week|-w)
        week
        ;;
    --stats|-s)
        stats
        ;;
    --schedule|-sc)
        schedule
        ;;
    *)
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
        ;;
    esac
}

# Commands

# Main pomodoro function
pomodoro() {
    clear
    # If pomodoro config file does not exist, create it with default values
    if ! test -f  ~/.local/bin/.pomodoro_config; then
        echo "MINIMALISTIC=true" > ~/.local/bin/.pomodoro_config
        echo "PROGRESS_BAR_STYLE=1" >> ~/.local/bin/.pomodoro_config
        echo "STATS_PATH=$STATS_PATH"  >> ~/.local/bin/.pomodoro_config
        echo "THEME=default" >> ~/.local/bin/.pomodoro_config
        echo "DEFAULT_CATEGORY=Working" >> ~/.local/bin/.pomodoro_config
        echo "Created default .pomodoro_config file at ~/.local/bin/.pomodoro_config"
    fi
    if ! test -f $STATS_PATH/pomodoro_stats.csv; then
        echo "Creating pomodoro stats file at $STATS_PATH/pomodoro_stats.csv"
        echo "date;category;work_minutes;break_minutes" > $STATS_PATH/pomodoro_stats.csv
    fi
    ascii_pomodoro
    if [[ $cycles_remaining -gt 1 ]]; then
        echo "üíª üìñ üëì $WORK_MINUTES minutes of $WORK_CATEGORY for $cycles_remaining cycles..."
    else
        echo "üíª üìñ üëì $WORK_MINUTES minutes of $WORK_CATEGORY..."
    fi
    countdown "$WORK_SECONDS" "Work"

    echo "‚òï Time for a break: $BREAK_MINUTES minutes..."
    countdown "$BREAK_SECONDS" "Break"

    echo "‚úÖ Pomodoro session complete!"

    echo "$(date +'%Y-%m-%d %H:%M');$WORK_CATEGORY;$WORK_MINUTES;$BREAK_MINUTES" >> $STATS_PATH/pomodoro_stats.csv
    cycles_remaining=$((cycles_remaining - 1))
    if [[ cycles_remaining -gt 0 ]]; then
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
    else
        echo "üéâ All cycles completed! Well done!"
    fi
    exit 0
}

# Display version information
version() {
    echo "v1.0 Pomodoro Timer - a simple pomodoro timer for Unix"
    exit 0
}

# Display help messages
help() {
    printf "
        Usage: pomodoro [WORK_MINUTES] [BREAK_MINUTES] [WORK_CATEGORY] [AMOUNT_OF_CYCLES]
        Default: 25 minutes work, 5 minutes break, category 'Working', cycles 1
        Example:
        %-4spomodoro 30 10 'Reading' 2\n
        Commands:
        %-4s--help, -h          Show help
        %-4s--version, -v       Show version
        %-4s--day, -d           Show today's stats
        %-4s--week, -w          Show this week's stats
        %-4s--stats, -s         Show level, combined working minutes and most worked category
        %-4s--schedule, -sc     Shows today's schedule. For more information please see the section schedule.\n
        Check the config file at ~/.local/bin/.pomodoro_config for more options.\n
        Config file options:
        %-4sMINIMALISTIC=true/false       Enable/disable minimalistic mode
        %-4sTHEME=default                 Options are default|miami|sunrise|dracula|mint|night|ocean|seabreeze|shiny
        %-4sPROGRESS_BAR_STYLE=1-5        Choose progress bar style (1-5)
        %-4sSTATS_PATH=/path/to/stats     Set the path for stats file
        %-4sDEFAULT_CATEGORY=Category     Set the default category for pomodoros
        %-4sDEFAULT_WORK_MINUTES=25       Determines default work minutes timer is using. Only numbers allowed
        %-4sDEFAULT_BREAK_MINUTES=5       Determines default break minutes timer is using. Only numbers allowed\n
        Schedule:
        %-4sYou can create pomodoro_schedule.csv in the folder where your .pomodoro_config file's STATS_PATH parameter is pointing.
        %-4sIn this file you can add fixed schedules for each day. Following is example of pomodoro_schedule.csv:
        %-8sdate;category;description;start_time;end_time
        %-8sMonday;work;Work time;8:00;16:00
        %-8sMonday;sport;Gym;10:30;11:30
        %-8sMonday;hobby;Painting;16:30;17:30
        %-8sMonday;study;Studying a new language;18:30;20:00
        %-8sMonday;leisure;Playing Games;21:00;22:00
        %-8sTuesday;work;Work time;9:00;17:00
        %-8s...
        %-4sThen you can display your fixed schedule in cool fashion with commands pomodoro -sc or pomodoro --schedule\n
        Enjoy your productivity boost! üöÄ
    "
    exit 0
}

# Display today's pomodoro stats
day() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')

    if [[ -f "$stats_file" ]]; then
        stats=$(grep "$today" "$stats_file")
        if [[ -z "$stats" ]]; then
            echo "‚ùå No pomodoro stats found for today."
        else
            minutes=$(get_combined_minutes 'day' 'work')
            echo "üìä Today's ${pomodoro_color_scheme}"$today"${reset} Pomodoro Stats ‚úÖ"
            echo "üíª Combined working minutes are ${pomodoro_color_scheme}${minutes}${reset}! $(get_working_minutes_emoji ${minutes} 'day')"
            get_table_header
            while IFS=";" read -r date category work break; do
                printf "|‚úÖ${reset} %-19s ${pomodoro_color_scheme}|${reset} %-33s ${pomodoro_color_scheme}|${reset} %4s ${pomodoro_color_scheme}|${reset} %4s ${pomodoro_color_scheme}|\n" "$date" "$category" "$work" "$break"
            done <<< "$stats"
            get_table_footer
        fi
    else
        echo "‚ùå No pomodoro stats found for today."
    fi
    exit 0
}

week() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')

    if [[ -f "$stats_file" ]]; then
        found=false
        for i in {0..6}; do
            day=$(date -d "$today - $i days" +'%Y-%m-%d')
            stats=$(grep "$day" "$stats_file")
            if [[ -n "$stats" ]]; then
                if ! $found; then
                    minutes=$(get_combined_minutes 'week', 'work')
                    echo "üìÖ Pomodoro Stats for ${pomodoro_color_scheme}$(date -d "$today - 6 days" +'%Y-%m-%d')${reset} - ${pomodoro_color_scheme}$today${reset} ‚úÖ"
                    echo "üíª Combined working minutes are ${pomodoro_color_scheme}${minutes}${reset}! $(get_working_minutes_emoji $minutes 'week')"
                    get_table_header
                fi
                found=true
                while IFS=";" read -r date category work break; do
                    printf "|‚úÖ${reset} %-19s ${pomodoro_color_scheme}|${reset} %-33s ${pomodoro_color_scheme}|${reset} %4s ${pomodoro_color_scheme}|${reset} %4s ${pomodoro_color_scheme}|\n" "$date" "$category" "$work" "$break"
                done <<< "$stats"
            fi
        done
        if ! $found; then
            echo "‚ùå No pomodoro stats found for this week."
        else
            get_table_footer
        fi
    else
        echo "‚ùå No pomodoro stats found for this week."
    fi
    exit 0
}

stats() {
    clear
    ascii_pomodoro
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    if [[ -f "$stats_file" ]]; then
        working_minutes=$(get_combined_minutes 'all', 'work')
        break_minutes=$(get_combined_minutes 'all', 'break')
        exp=$(((working_minutes+break_minutes)*2))
        echo "üìä All Time Pomodoro Stats ‚úÖ"
        print_level_stats $exp
        echo "üíª Combined working minutes are ${pomodoro_color_scheme}${working_minutes}${reset}! $(get_working_minutes_emoji ${working_minutes})"
        echo "‚òï Combined break minutes are ${pomodoro_color_scheme}${break_minutes}${reset}! $(get_working_minutes_emoji ${break_minutes})"
        get_most_worked_category
    else
        echo "‚ùå No pomodoro stats found."
    fi
    exit 0
}

print_level_stats() {
    local exp=$1
    local -a xp_table
    local level=1
    local level_difference=0
    for ((i = 1; i < ${#xp_table[@]}; i++)); do
        if (( exp < xp_table[i] )); then
            level=$i
            level_difference=$((xp_table[i]-exp))
            break
        fi
    done

    if (( exp >= xp_table[98] )); then
        level=99
    fi

    echo "$(get_level_emoji $level) Level: ${pomodoro_color_scheme}${level}${reset} Total XP: ${pomodoro_color_scheme}${exp}${reset} XP For Next Level: ${pomodoro_color_scheme}${level_difference}${reset}"
}

get_most_worked_category() {
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    declare -A category_minutes
    while IFS=";" read -r date category work break; do
        if [[ -n "$category" && -n "$work" ]]; then
            category_minutes["$category"]=$((category_minutes["$category"] + work))
        fi
    done < "$stats_file"

    if [ ${#category_minutes[@]} -eq 0 ]; then
        echo "‚ùå No categories found in stats."
        return
    fi

    local max_category=""
    local max_minutes=0
    for category in "${!category_minutes[@]}"; do
        if (( category_minutes["$category"] > max_minutes )); then
            max_minutes=${category_minutes["$category"]}
            max_category=$category
        fi
    done

    echo "üèÜ Most worked category is ${pomodoro_color_scheme}${max_category}${reset} with ${pomodoro_color_scheme}${max_minutes}${reset} working minutes!"
}

get_level_emoji() {
    local level=$1
    if (( level >= 98 )); then
        echo "ü¶ß"
    elif (( level >= 90 )); then
        echo "üå¥"
    elif (( level >= 80 )); then
        echo "üéÑ"
    elif (( level >= 70 )); then
        echo "üå≤"
    elif (( level >= 60 )); then
        echo "üå≥"
    elif (( level >= 50 )); then
        echo "üéã"
    elif (( level >= 40 )); then
        echo "üåµ"
    elif (( level >= 30 )); then
        echo "ü™¥"
    elif (( level >= 20 )); then
        echo "ü¶ó"
    elif (( level >= 10 )); then
        echo "üå±"
    else
        echo "üçÉ"
    fi
}

schedule() {
    clear
    ascii_pomodoro
    schedule_file="$STATS_PATH/pomodoro_schedule.csv"
    date=$(date +%A)
    echo "üìÖ ${date}'s Schedule ‚úÖ"
    get_schedule_header
    if [[ -f "$schedule_file" ]]; then
        schedule_response=$(grep "$date" "$schedule_file")
        if [[ -z "$schedule_response" ]]; then
            echo "‚ùå No schedule found for today."
        else
            while IFS=";" read -r _ category description start_time end_time; do
                description=$(echo "$description" | tr -d '\r')
                start_time=$(echo "$start_time" | tr -d '\r')
                end_time=$(echo "$end_time" | tr -d '\r')
                if [[ $category == "work" ]]; then
                    description="üíª $description"
                elif [[ $category == "sport" ]]; then
                    description="üèê $description"
                elif [[ $category == "leisure" ]]; then
                    description="üéÆ $description"
                elif [[ $category == "study" ]]; then
                    description="üìï $description"
                elif [[ $category == "hobby" ]]; then
                    description="üé® $description"
                else
                    description="‚ùì $description"
                fi
                printf "| ${reset}%-32s ${pomodoro_color_scheme}|${reset}%11s${pomodoro_color_scheme}|${reset}%10s${pomodoro_color_scheme}|\n" "$description" "$start_time" "$end_time"
            done <<< "$schedule_response"
        fi
        get_schedule_footer
    else
        echo "‚ùå No pomodoro schedule found at $schedule_file."
    fi
}

ascii_pomodoro() {
    if [[ "$MINIMALISTIC" == "true" ]]; then
        return
    fi
    echo -e "${pomodoro_color_scheme}"
    cat <<'EOF'
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
EOF
    echo -e "${reset}"
}

get_table_header() {
    echo "${pomodoro_color_scheme}|-------------------------------------------------------------------------|"
    echo "|${reset}Date${pomodoro_color_scheme}...................|${reset}Category${pomodoro_color_scheme}...........................|${reset}W.Min${pomodoro_color_scheme}.|${reset}B.Min${pomodoro_color_scheme}.|"
    echo "|-------------------------------------------------------------------------|"
}

get_schedule_header() {
    echo "${pomodoro_color_scheme}|-------------------------------------------------------|"
    echo "|${reset}Description${pomodoro_color_scheme}.....................|${reset}Start Time${pomodoro_color_scheme}.|${reset}End Time${pomodoro_color_scheme}..|"
    echo "|-------------------------------------------------------|"
}

get_schedule_footer() {
    echo "${pomodoro_color_scheme}|-------------------------------------------------------|"
}

get_table_footer() {
    echo "${pomodoro_color_scheme}|-------------------------------------------------------------------------|"
}

get_combined_minutes() {
    local combined_minutes=0
    time_parameter=$1
    type=$2
    stats_file="$STATS_PATH/pomodoro_stats.csv"
    today=$(date +'%Y-%m-%d')
    if [ "$1" == "day" ]; then
        stats=$(grep "$today" "$stats_file")
        if [[ -n "$stats" ]]; then
            while IFS=";" read -r date category work break; do
                if [[ $work -gt 0 ]]; then
                    combined_minutes=$((combined_minutes+${type}))
                fi
            done <<< "$stats"
        fi
    elif [ "$1" == "week" ]; then
        for i in {0..6}; do
            day=$(date -d "$today - $i days" +'%Y-%m-%d')
            stats=$(grep "$day" "$stats_file")
            if [[ -n "$stats" ]]; then
                while IFS=";" read -r date category work break; do
                    if [[ $work -gt 0 ]]; then
                        combined_minutes=$((combined_minutes+${type}))
                    fi
                done <<< "$stats"
            fi
        done
    else
        while IFS=";" read -r date category work break; do
            if [[ $work -gt 0 ]]; then
                combined_minutes=$((combined_minutes+${type}))
            fi
        done < "$stats_file"
    fi
    printf $combined_minutes
}

get_working_minutes_emoji() {
    working_minutes=$1
    time_parameter=$2
    case "$time_parameter" in
    "day")
        if [[ $working_minutes -gt 359 ]]; then
            echo "üü¢" 
        elif [[ $working_minutes -lt 359 ]] && [[ $working_minutes -gt 240 ]]; then
            echo "üü°"
        else
            echo "üî¥"
        fi
    ;;
    "week")
        if [[ $working_minutes -gt 1795 ]]; then
            echo "üü¢"
        elif [[ $working_minutes -lt 1795 ]] && [[ $working_minutes -gt 1200 ]]; then
            echo "üü°"
        else
            echo "üî¥"
        fi
    ;;
    "all")
        if [[ $working_minutes -gt 15000 ]]; then
            echo "üü¢"
        elif [[ $working_minutes -lt 15000 ]] && [[ $working_minutes -gt 10000 ]]; then
            echo "üü°"
        else
            echo "üî¥"
        fi
    ;;
    esac
}

get_color_scheme() {
    local theme_count=8
    case "$THEME" in
    "default")
        printf $'\e[37m'  # White
        ;;
    "miami")
        printf $'\e[95m'  # Pink
        ;;
    "sunrise")
        printf $'\e[93m'  # Yellow
        ;;
    "dracula")
        printf $'\e[31m'  # Red
        ;;
    "mint")
        printf $'\e[92m'  # Green
        ;;
    "night")
        printf $'\e[90m'  # Dark Gray
        ;;
    "ocean")
        printf $'\e[94m'  # Blue
        ;;
    "seabreeze")
        printf $'\e[96m'  # Cyan
        ;;
    "shiny")
        randi=$(( RANDOM % (theme_count - 1 + 1 ) + 1 ))
        case $randi in
        1) printf $'\e[37m' ;;
        2) printf $'\e[95m' ;;
        3) printf $'\e[93m' ;;
        4) printf $'\e[31m' ;;
        5) printf $'\e[92m' ;;
        6) printf $'\e[90m' ;;
        7) printf $'\e[94m' ;;
        8) printf $'\e[96m' ;;
        esac
        ;;
    *)
        printf $'\e[37m'  # Default to white if unknown theme
        ;;
    esac
}

main "$@"