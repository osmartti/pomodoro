#!/bin/bash

WORK_MINUTES=${1:-25}
BREAK_MINUTES=${2:-5}
WORK_CATEGORY=${3:-""}
WORK_SECONDS=$((WORK_MINUTES * 60))
BREAK_SECONDS=$((BREAK_MINUTES * 60))

countdown() {
    local total=$1
    local message=$2
    local width=30
    local seconds=$total
    local spinner_chars=(":    " "::   " ":::  " " ::::" "  :::" "   ::" "    :" "     ")
    local spinner_index=0

    while [[ $seconds -gt 0 || $seconds -eq 0 ]]; do
        local mins=$((seconds / 60))
        local secs=$((seconds % 60))

        local percent=$(( (total - seconds) * 100 / total ))
        local filled=$(( percent * width / 100 ))
        local empty=$(( width - filled ))

        # ANSI colors
        local green=$'\e[32m'
        local red=$'\e[31m'
        local reset=$'\e[0m'
        local orange=$'\e[33m'
        # Build colored progress bar
        local filled_bar=""
        for ((i = 0; i < filled; i++)); do filled_bar+="|"; done
        local empty_bar=""
        for ((i = 0; i < empty; i++)); do empty_bar+="|"; done

        local bar="${green}${filled_bar}${red}${empty_bar}${reset}"
        local spinner="${spinner_chars[spinner_index]}"
        spinner_index=$(( (spinner_index + 1) % ${#spinner_chars[@]} ))
        # Print the progress bar
        printf "\r[%s] ${orange}%s${reset} %02d:%02d remaining" "$bar" "$spinner" "$mins" "$secs" 

        sleep 1
        ((seconds--))
    done
    # End of countdown function
    echo -e "\n$message complete!\a"

    # If running in WSL, try playing a sound using PowerShell
    if grep -qi microsoft /proc/version; then
        if [[ "$2" == "Work" ]]; then
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm09.wav").PlaySync()' &
        else
            powershell.exe -c '(New-Object Media.SoundPlayer "C:\\Windows\\Media\\Alarm10.wav").PlaySync()' &
        fi
    fi
}

# Main method
main() {
    case $1 in

    --help|-h)
        help
        ;;
    --version|-v)
        echo "Pomodoro Timer - a simple pomodoro timer for Unix v1.0"
        exit 0
        ;;
    --day|-d)
        day
        ;;
    *)
        pomodoro "$WORK_MINUTES" "$BREAK_MINUTES" "$WORK_CATEGORY"
        ;;
    esac
}

# Commands

# Main pomodoro function
pomodoro() {
    clear
    if ! test -f /home/$(whoami)/pomodoro_stats.csv; then
        echo "date;category;work_minutes;break_minutes" > /home/$(whoami)/pomodoro_stats.csv
    fi

    pink=$'\e[95m'
    reset=$'\e[0m'
    echo -e "${pink}"
    ascii_pomodoro
    echo -e "${reset}"
    echo "💻 📖 👓 $WORK_MINUTES minutes of focus..."
    countdown "$WORK_SECONDS" "Work"

    echo "☕ Time for a break: $BREAK_MINUTES minutes..."
    countdown "$BREAK_SECONDS" "Break"

    echo "✅ Pomodoro session complete!"

    echo "$(date +'%Y-%m-%d %H:%M:%S');$WORK_CATEGORY;$WORK_MINUTES;$BREAK_MINUTES" >> /home/$(whoami)/pomodoro_stats.csv
}

# Display help messages
help() {
    echo "Usage: pomodoro [WORK_MINUTES] [BREAK_MINUTES] [WORK_CATEGORY]"
    echo "Default: 25 minutes work, 5 minutes break, no category"
    echo "Example: pomodoro 30 10 'Reading'"
    exit 0
}

# Display today's pomodoro stats
day() {
    clear
    pink=$'\e[95m'
    reset=$'\e[0m'
    echo -e "${pink}"
    ascii_day
    echo -e "${reset}"
    echo "==================="
    echo "Date;Category;Work Minutes;Break Minutes"
    if test -f /home/$(whoami)/pomodoro_stats.csv; then
        cat /home/$(whoami)/pomodoro_stats.csv | grep "$(date +'%Y-%m-%d')"
        if [[ $? -ne 0 ]]; then
            echo "No pomodoro stats found for today."
        fi
    else
        echo "No pomodoro stats found for today."
    fi
    exit 0
}

ascii_pomodoro() {
  cat <<'EOF'
██████╗  ██████╗ ███╗   ███╗ ██████╗ ██████╗  ██████╗ ██████╗  ██████╗ 
██╔══██╗██╔═══██╗████╗ ████║██╔═══██╗██╔══██╗██╔═══██╗██╔══██╗██╔═══██╗
██████╔╝██║   ██║██╔████╔██║██║   ██║██║  ██║██║   ██║██████╔╝██║   ██║
██╔═══╝ ██║   ██║██║╚██╔╝██║██║   ██║██║  ██║██║   ██║██╔══██╗██║   ██║
██║     ╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██████╔╝╚██████╔╝██║  ██║╚██████╔╝
╚═╝      ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ 
EOF
}

ascii_day() {
  cat <<'EOF'
██████╗  █████╗ ██╗   ██╗
██╔══██╗██╔══██╗ ██║ ██║
██║  ██║███████║  ████╔╝
██║  ██║██╔══██║   ██║
██████╔╝██║  ██║   ██║
╚═════╝ ╚═╝  ╚═╝   ╚═╝
EOF
}

main "$@"